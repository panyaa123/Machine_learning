Introduction
hello, everyone here I am using 'linearRegression' model of scikit library and using given linear regression dataset.

Libraries used
Here I am using scikit learn for implementing linear resgression and also using pandas, numpy, mathplotlib and seaborn for data visulization.

Importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
Reading data from csv file
train = pd.read_csv('../input/random-linear-regression/train.csv')
test = pd.read_csv('../input/random-linear-regression/test.csv')
train.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 700 entries, 0 to 699
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   x       700 non-null    float64
 1   y       699 non-null    float64
dtypes: float64(2)
memory usage: 11.1 KB
test.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 300 entries, 0 to 299
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   x       300 non-null    int64  
 1   y       300 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 4.8 KB
Removing Column Null Values
train.dropna(inplace= True)
test.dropna(inplace = True)
train.info()
test.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 699 entries, 0 to 699
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   x       699 non-null    float64
 1   y       699 non-null    float64
dtypes: float64(2)
memory usage: 16.4 KB
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 300 entries, 0 to 299
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   x       300 non-null    int64  
 1   y       300 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 4.8 KB
PLotting train data using matplotlib
plt.title('Scatter plot of train data')

plt.scatter(train['x'],train['y'],color='blue')
plt.xlabel('X_train')
plt.ylabel('Y_train')
plt.show()

Data Visulization
plt.title('Scatter plot of test data')

plt.scatter(test['x'],test['y'],color='red')
plt.xlabel('X_test')
plt.ylabel('Y_test')
plt.show()

Spliting into label and features
x_train =train.iloc[:,0].values.reshape(-1,1)
y_train =train.iloc[:,1].values.reshape(-1,1)
x_test =test.iloc[:,0].values.reshape(-1,1)
y_test =test.iloc[:,1].values.reshape(-1,1)
Creating Linear regression object
linear = LinearRegression();
fitting data into linear regression
linear.fit(x_train,y_train)
LinearRegression()
Predicting data using test
data_pred = linear.predict(x_test)
PLoting the prediction of test data
plt.title('Ploting the prediction of test data')


plt.scatter(x_train,y_train,label='orignal train data',color='blue')
plt.scatter(x_test,data_pred,label='linear regression',color='red')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.show()

Checking Accuracy of the model
accuracy_score = linear.score(y_test,data_pred)
print(accuracy_score)
0.9883886222259362
Thank you!!
If You like please upvote my notebook and please suggest is anything is wrong this is my first try.